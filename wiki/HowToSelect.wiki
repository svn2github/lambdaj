select is main function exposed by lambdaj. it is used essentially to filter a collection of objects with a particular condition. But make attentions that "select from" operate over a tree of object and can collect leafs!

an insured have a reference to country, so we can:
{{{
franceInsureds = collect(forEach(programme).getCountries().getInsureds(), where("country", is(France)))
}}}

now we sum exposures' value of franceInsureds
{{{
exposuresValue = sum(forEach(franceInsureds).getExposures().getValue())
}}}

and we sum deductions' values of same franceInsureds
{{{
deductionValue = sum(forEach(franceInsureds).getExposures().getValue())
}}}


follow statement can be part of function that calculate a net premiums values. For ifnstance can be:
{{{
function netPremium(programme, premiumRate) {
  franceInsureds = collect(forEach(programme).getCountries().getInsureds(), where("country", is(France)))
  exposuresValue = sum(forEach(franceInsureds).getExposures().getValue())
  deductionValue = sum(forEach(franceInsureds).getDeductions().getValue())
return premiumRate.of(exposuresValue - deductionValues);
}
}}}

note that example below wasn't be an example of clean code or good object orientation design. Its want only show how we can use lambdaj to simplify the semantics of function using a literate style of programming.


we try to explain our intention with a simple example of structured data:
{{{
. programme
`-- countries
    |- country1
    |  |- name
    |  |- iso
    |  |- flag
    |  `- insureds   
    |     |- name
    |     |- exposures
    |     |  |- exposure1
    |     |  |  |- name
    |     |  |  `- value
    |     |  `- exposure2
    |     |     |- name
    |     |     `- value
    |     `- deductions
    |        |- deduction1
    |        |  |- name
    |        |  `- value
    |        `- deduction2
    |           |- name
    |           `- value
    |- country2
    |  |- name
    |  |- iso
    |  |- flag
    |  `- insureds   
    |     |- name
    |     |- exposures
    |     |  |- exposure1
    |     |  |  |- name
    |     |  |  `- value
    |     |  `- exposure2
    |     |     |- name
    |     |     `- value
    |     `- deductions
    |        |- deduction1
    |        |  |- name
    |        |  `- value
    |        `- deduction2
    |           |- name
    |           `- value
    |- country3
    |  |- name
    |  |- iso
    |  |- flag
    |  `- insureds   
    |     |- name
    |     |- exposures
    |     |  |- exposure1
    |     |  |  |- name
    |     |  |  `- value
    |     |  `- exposure2
    |     |     |- name
    |     |     `- value
    |     `- deductions
    |        |- deduction1
    |        |  |- name
    |        |  `- value
    |        `- deduction2
    |           |- name
    |           `- value
    ...
}}}